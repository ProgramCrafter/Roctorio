#:set UNIT 60
# UNIT = 40: 1920x1080 -> 48x27
# UNIT = 60: 1920x1080 -> 32x18

#:import Factory kivy.factory.Factory
#:import Clock kivy.clock.Clock
#:import ATAN2 math.atan2
#:import SIN math.sin
#:import COS math.cos
#:import pi math.pi

#:import GDSolutions utils.GameDesignSolutions

#:set d60 -pi / 3

#:set SIZE      128
#:set OFFSET_X  SIZE * 1 / 4 * (3 ** 0.5)
#:set OFFSET_Y  SIZE * 3 / 4

<ColouredWidget@Widget>:
  backcolor:            0.1, 0.1, 0.1, 1
  forecolor:            1.0, 1.0, 1.0, 1
  
  color:                self.forecolor
  
  canvas.before:
    Color:
      rgba:             self.backcolor
    Rectangle:
      pos:              self.pos
      size:             self.size

<ColouredLabel@ColouredWidget+Label>:
  font_size:            16

<ColouredButton@Button>:
  backcolor:            0.1, 0.1, 0.1, 1
  forecolor:            1.0, 1.0, 1.0, 1
  
  color:                self.forecolor
  
  background_color:     self.backcolor
  background_normal:    ''

<ColouredFloatLayout@ColouredWidget+FloatLayout>:
<ColouredGridLayout@ColouredWidget+GridLayout>:

<FillableButton@Button>:
  backcolor:            0.9, 0.9, 0.9, 1
  fillcolor:            0.6, 0.9, 0.6, 1
  forecolor:            1.0, 1.0, 1.0, 1
  background_color:     1.0, 1.0, 1.0, 0
  background_normal:    ''
  color:                self.forecolor
  
  progress:             0
  needed:               100
  
  callback:             None
  clock_callback:       None
  scheduled:            None
  
  canvas.before:
    Color:
      rgba:             self.backcolor
    Rectangle:
      pos:              self.pos
      size:             self.size
    Color:
      rgba:             self.fillcolor
    Rectangle:
      pos:              self.pos
      size:             self.width * self.progress / max(self.needed, 1), self.height
        # max(self.needed, 1)  is needed because of ZeroDivisionError otherwise
  
  on_kv_post:
    app.game.log('FillableButton.needed = ', self.needed)
  
  on_press:
    if self.scheduled: Clock.unschedule(self.scheduled)
    self.clock_callback = lambda time: app.fillable_button_callback(self)
    self.scheduled = Clock.schedule_interval(self.clock_callback, 0.05)
  
  on_release:
    if self.scheduled: Clock.unschedule(self.scheduled)
    self.scheduled = False
    self.progress = 0

### position utils ###
<HexPositionable@Widget>:
  px:                   0
  py:                   0
  dx:                   0
  dy:                   0
  
  pos:                  (self.px * 2 + self.py) * OFFSET_X + self.dx, (self.py) * OFFSET_Y + self.dy

<MechanismDeltaCalc@HexPositionable>:
  side:                 0
  dx:                   (OFFSET_X + SIZE / 2 if self.side in [0, 1] else (OFFSET_X / 2 + SIZE / 4 if self.side in [2, 5] else 0)) - self.width / 2
  dy:                   (OFFSET_Y if self.side in [0, 4] else (SIZE / 4 if self.side in [1, 3] else (SIZE if self.side == 5 else 0))) - self.height / 2

### position utils end ###

### drawing utils ###
<HexagonDrawer@Widget>:
  tx_source:            'assets/tiles/desert-256-b.png'
  
  size_hint:            None, None
  size:                 SIZE, SIZE
  
  canvas.after:
    Color:
      rgba:             1.0, 1.0, 1.0, 1
    
    Ellipse:
      segments:         6
      pos:              self.pos
      size:             self.size
      source:           self.tx_source

<EntityDrawer@Widget>:
  tx_source:            'assets/entities/entity-256.png'
  
  size_hint:            None, None
  size:                 SIZE, SIZE
  
  canvas.after:
    Color:
      rgba:             1.0, 1.0, 1.0, 1
    
    Ellipse:
      segments:         6
      pos:              self.pos
      size:             self.size
      source:           self.tx_source

<EntHP@HexPositionable>:
  size_hint:            None, None
  size:                 80, 15
  
  dx:                   SIZE / 2 - self.width / 2
  
  health:               10
  
  canvas.after:
    Color:
      rgba:             1.0, 1.0, 0.0, 1
    
    Rectangle:
      pos:              self.pos
      size:             self.size
    
    Color:
      rgba:             0.0, 1.0, 0.0, 1
    
    Rectangle:
      pos:              self.pos
      size:             self.width * self.health / 10, self.height

<Resource@DragBehavior+Widget>:
  size_hint:            None, None
  size:                 28, 28
  
  q:                    0
  opacity:              bool(self.q) + 0
  tx_source:            'assets/resources/water-256.png'
  
  drag_rectangle:       self.x, self.y, self.width, self.height
  drag_timeout:         10000000
  drag_distance:        0
  
  py_resource:          None
  
  on_touch_down:
    if self.collide_point(*args[1].pos): print('dragging', self.py_resource)
  # TODO: freeze inventory
  #   if self.collide_point(*args[1].pos): self.py_resource.freeze_inventory()
  
  on_touch_up:
    # _drag_touch is black magic from Kivy source
    # https://github.com/kivy/kivy/blob/
    #   31308184cf2c127e77b3f61c100179f854d4df3f/kivy/uix/behaviors/drag.py#L196
    if self._drag_touch: self.py_resource.align(app.game.world)
  
  canvas.before:
    Color:
      rgba:             1.0, 1.0, 1.0, 1
    
    Rectangle:
      pos:              self.pos
      size:             self.size
      source:           self.tx_source
  
  Label:
    text:               ('[b]%d[/b]' % root.q) if root.opacity else ''
    color:              0.0, 0.0, 0.0, 1
    markup:             True
    
    pos:                root.right - self.width + 4, root.y - 4
    text_size:          root.size
    size:               root.size
    halign:             'right'
    valign:             'bottom'

<CraftResultArrow@Widget>:
  size_hint:            None, None
  size:                 28, 28
  
  canvas.before:
    Color:
      rgba:             1.0, 1.0, 1.0, 1
    
    Rectangle:
      pos:              self.pos
      size:             self.size
      source:           'assets/additional/arrow.png'

<Inventory@ColouredGridLayout>:
  rows:                 1
  backcolor:            0.9, 0.9, 0.9, 0.7
  host:                 None
  
  size_hint:            None, None
  size:                 self.minimum_width, self.minimum_height
  pos:                  0, 0
  
  padding:              4, 4
  
### drawing utils end ###

<Hex@HexPositionable+HexagonDrawer>:
<Entity@HexPositionable+EntityDrawer>:

<Decoration@HexPositionable>:
  tx_source:            'assets/decorations/copper-pipe-16-76.png'
  
  side:                 0
  callback:             None
  
  dec_offset:           6
  
  r:                    1.0
  
  size_hint:            None, None
  width:                SIZE / 8
  height:               SIZE / 2 + self.dec_offset * 2
  
  # host_x:               self.x + OFFSET_X + 8 + COS(d60 * self.side) * (OFFSET_X - 8) + 10
  host_x:               self.x + OFFSET_X + 8 + COS(d60 * self.side) * (OFFSET_X - 8) - 10
  host_y:               self.y + SIZE / 2 + SIN(d60 * self.side) * (SIZE / 2 - self.dec_offset) - 20
  host_pos:             self.host_x, self.host_y
  
  canvas.after:
    Color:
      rgba:             self.r or 0.0, 1.0, 1.0, 1
    
    PushMatrix
    Rotate:
      angle:            360 - 60 * self.side
      origin:           self.x + OFFSET_X + 8, self.y + SIZE / 2
    
    Rectangle:
      pos:              self.x + OFFSET_X * 2, self.y + SIZE / 4 - self.dec_offset
      size:             self.size
      source:           self.tx_source
    
    PopMatrix
  
  on_touch_down:
    # rotation center X, Y
    rcx, rcy = self.x + OFFSET_X + 8, self.y + SIZE / 2
    
    # touch X, Y
    tx, ty = args[1].pos
    tx -= rcx
    ty -= rcy
    
    dist = (tx * tx + ty * ty) ** 0.5
    alpha = ATAN2(ty, tx)
    alpha += pi / 3 * self.side
    
    # rotated touch X, Y
    rtx, rty = COS(alpha) * dist, SIN(alpha) * dist
    rtx += rcx
    rty += rcy
    
    dlx, dby = self.x + OFFSET_X * 2, self.y + SIZE / 4 - self.dec_offset
    drx, dty = dlx + self.width, dby + self.height
    
    if dlx <= rtx <= drx and dby <= rty <= dty and self.callback: self.callback()

<Mechanism@MechanismDeltaCalc>:
  tx_source:            'assets/mechanisms/pump-256.png'
  
  size_hint:            None, None
  size:                 SIZE / 3, SIZE / 3
  
  # host_pos:             self.right - 12, self.top - 12
  host_pos:             self.x - 12, self.top - 12
  
  canvas.after:
    Color:
      rgba:             1, 1, 1, 1
    
    Rectangle:
      pos:              self.pos
      size:             self.size
      source:           self.tx_source

<InfiniteHexGrid@FloatLayout>:

<GameInterface@ColouredFloatLayout>:
  backcolor:            1.0, 1.0, 1.0, 1
  
  InfiniteHexGrid:
    id:                 playground
    
    # raccoon's inventory position
    host_pos:           self.width * 1 / 10, self.height * (1 - 1 / 8)
  
  GridLayout:
    cols:               1
    size_hint:          1 / 10, 1 / 8
    pos_hint:           {'top': 1}
    
    ColouredLabel:
      id:               tps_meter
      
      backcolor:        0.9, 0.8, 0.9, 1
      forecolor:        0.0, 0.0, 0.0, 1
      
      text_size:        self.width, None
      valign:           'center'
      halign:           'left'
      padding:          20, 5
    
    ColouredButton:
      backcolor:        0.9, 0.8, 0.8, 1
      forecolor:        0.0, 0.0, 0.0, 1
      
      text_size:        self.width, None
      valign:           'center'
      halign:           'center'
      text:             'Скрафтить'
      
      on_press:
        Factory.CraftingView().open()
    
    ColouredButton:
      backcolor:        0.9, 0.85, 0.8, 1
      forecolor:        0.0, 0.0, 0.0, 1
      
      text_size:        self.width, None
      valign:           'center'
      halign:           'center'
      text:             'Атаковать'
      
      on_press:
        app.game.attack_nearby()

<CraftingRecipe@ColouredGridLayout>:
  rows:                 1
  
  padding:              16, 16
  spacing:              16, 0
  
  backcolor:            0.6, 0.6, 0.6, 1
  
  size_hint:            1, None
  height:               self.minimum_height
  
  FillableButton:
    size_hint_x:        None
    width:              300
    
    text:               'Скрафтить'
    
    forecolor:          0.0, 0.0, 0.0, 1
    
    id:                 craft_button

<BlockingView@ModalView>:
  auto_dismiss:         True
  
  on_open:
    app.game_thread.pause_game()
  
  on_dismiss:
    app.game_thread.continue_game()

<CraftingView@BlockingView>:
  size_hint:            0.6, 0.6
  
  background:           ''
  background_color:     0.9, 0.9, 0.9, 1
  
  ScrollView:
    size_hint:          1, 1
    
    GridLayout:
      cols:             1
      
      spacing:          0, 8
      padding:          16, 16
      size_hint:        1, None
      height:           self.minimum_height
      
      id:               recipes
      
      on_kv_post:       app.put_recipes(self)
